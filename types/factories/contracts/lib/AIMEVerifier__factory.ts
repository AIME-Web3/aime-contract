/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AIMEVerifier,
  AIMEVerifierInterface,
} from "../../../contracts/lib/AIMEVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
      {
        internalType: "bytes[2]",
        name: "inputs",
        type: "bytes[2]",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f68061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c35cc9ea14602d575b600080fd5b604160383660046055565b60019392505050565b604051901515815260200160405180910390f35b600080600060408486031215606957600080fd5b833567ffffffffffffffff80821115608057600080fd5b818601915086601f830112609357600080fd5b81358181111560a157600080fd5b87602082850101111560b257600080fd5b60209283019550935090850135908082111560cc57600080fd5b5084016040810186101560de57600080fd5b80915050925092509256fea164736f6c6343000814000a";

type AIMEVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AIMEVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AIMEVerifier__factory extends ContractFactory {
  constructor(...args: AIMEVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AIMEVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AIMEVerifier__factory {
    return super.connect(runner) as AIMEVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AIMEVerifierInterface {
    return new Interface(_abi) as AIMEVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AIMEVerifier {
    return new Contract(address, _abi, runner) as unknown as AIMEVerifier;
  }
}
