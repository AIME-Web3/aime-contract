/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IStaderStakeManager {
  export type BotDelegateRequestStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    amount: BigNumberish;
  };

  export type BotDelegateRequestStructOutput = [
    startTime: bigint,
    endTime: bigint,
    amount: bigint
  ] & { startTime: bigint; endTime: bigint; amount: bigint };

  export type BotUndelegateRequestStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    amount: BigNumberish;
    amountInBnbX: BigNumberish;
  };

  export type BotUndelegateRequestStructOutput = [
    startTime: bigint,
    endTime: bigint,
    amount: bigint,
    amountInBnbX: bigint
  ] & {
    startTime: bigint;
    endTime: bigint;
    amount: bigint;
    amountInBnbX: bigint;
  };

  export type WithdrawalRequestStruct = {
    uuid: BigNumberish;
    amountInBnbX: BigNumberish;
    startTime: BigNumberish;
  };

  export type WithdrawalRequestStructOutput = [
    uuid: bigint,
    amountInBnbX: bigint,
    startTime: bigint
  ] & { uuid: bigint; amountInBnbX: bigint; startTime: bigint };
}

export interface IStaderStakeManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptNewManager"
      | "addRestakingRewards"
      | "claimWithdraw"
      | "completeDelegation"
      | "completeUndelegation"
      | "convertBnbToBnbX"
      | "convertBnbXToBnb"
      | "deposit"
      | "getBnbXWithdrawLimit"
      | "getBotDelegateRequest"
      | "getBotUndelegateRequest"
      | "getContracts"
      | "getExtraBnbInContract"
      | "getTokenHubRelayFee"
      | "getTotalPooledBnb"
      | "getUserRequestStatus"
      | "getUserWithdrawalRequests"
      | "initialize"
      | "proposeNewManager"
      | "requestWithdraw"
      | "retryTransferOut"
      | "revokeBotRole"
      | "setBCDepositWallet"
      | "setBotRole"
      | "setFeeBps"
      | "setMinDelegateThreshold"
      | "setMinUndelegateThreshold"
      | "setRedirectAddress"
      | "startDelegation"
      | "startUndelegation"
      | "undelegationStarted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimWithdrawal"
      | "Delegate"
      | "ProposeManager"
      | "Redelegate"
      | "RequestWithdraw"
      | "RevokeBotRole"
      | "SetBCDepositWallet"
      | "SetBotRole"
      | "SetFeeBps"
      | "SetManager"
      | "SetMinDelegateThreshold"
      | "SetMinUndelegateThreshold"
      | "SetRedirectAddress"
      | "TransferOut"
      | "Undelegate"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptNewManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRestakingRewards",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeDelegation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeUndelegation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertBnbToBnbX",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertBnbXToBnb",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBnbXWithdrawLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBotDelegateRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBotUndelegateRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExtraBnbInContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenHubRelayFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPooledBnb",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRequestStatus",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserWithdrawalRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeNewManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retryTransferOut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBotRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBCDepositWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotRole",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeBps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDelegateThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinUndelegateThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedirectAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startUndelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "undelegationStarted",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptNewManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRestakingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeUndelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertBnbToBnbX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertBnbXToBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBnbXWithdrawLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBotDelegateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBotUndelegateRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExtraBnbInContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenHubRelayFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPooledBnb",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRequestStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeNewManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retryTransferOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBotRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBCDepositWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBotRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeBps", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinDelegateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinUndelegateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedirectAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startUndelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegationStarted",
    data: BytesLike
  ): Result;
}

export namespace ClaimWithdrawalEvent {
  export type InputTuple = [
    _account: AddressLike,
    _idx: BigNumberish,
    _amount: BigNumberish
  ];
  export type OutputTuple = [_account: string, _idx: bigint, _amount: bigint];
  export interface OutputObject {
    _account: string;
    _idx: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DelegateEvent {
  export type InputTuple = [_uuid: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_uuid: bigint, _amount: bigint];
  export interface OutputObject {
    _uuid: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposeManagerEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedelegateEvent {
  export type InputTuple = [_rewardsId: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_rewardsId: bigint, _amount: bigint];
  export interface OutputObject {
    _rewardsId: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RequestWithdrawEvent {
  export type InputTuple = [_account: AddressLike, _amountInBnbX: BigNumberish];
  export type OutputTuple = [_account: string, _amountInBnbX: bigint];
  export interface OutputObject {
    _account: string;
    _amountInBnbX: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeBotRoleEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBCDepositWalletEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetBotRoleEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeBpsEvent {
  export type InputTuple = [_feeBps: BigNumberish];
  export type OutputTuple = [_feeBps: bigint];
  export interface OutputObject {
    _feeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetManagerEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinDelegateThresholdEvent {
  export type InputTuple = [_minDelegateThreshold: BigNumberish];
  export type OutputTuple = [_minDelegateThreshold: bigint];
  export interface OutputObject {
    _minDelegateThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetMinUndelegateThresholdEvent {
  export type InputTuple = [_minUndelegateThreshold: BigNumberish];
  export type OutputTuple = [_minUndelegateThreshold: bigint];
  export interface OutputObject {
    _minUndelegateThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRedirectAddressEvent {
  export type InputTuple = [_address: AddressLike];
  export type OutputTuple = [_address: string];
  export interface OutputObject {
    _address: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferOutEvent {
  export type InputTuple = [_amount: BigNumberish];
  export type OutputTuple = [_amount: bigint];
  export interface OutputObject {
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UndelegateEvent {
  export type InputTuple = [_uuid: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_uuid: bigint, _amount: bigint];
  export interface OutputObject {
    _uuid: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IStaderStakeManager extends BaseContract {
  connect(runner?: ContractRunner | null): IStaderStakeManager;
  waitForDeployment(): Promise<this>;

  interface: IStaderStakeManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptNewManager: TypedContractMethod<[], [void], "nonpayable">;

  addRestakingRewards: TypedContractMethod<
    [_id: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimWithdraw: TypedContractMethod<
    [_idx: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeDelegation: TypedContractMethod<
    [_uuid: BigNumberish],
    [void],
    "nonpayable"
  >;

  completeUndelegation: TypedContractMethod<
    [_uuid: BigNumberish],
    [void],
    "payable"
  >;

  convertBnbToBnbX: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "view"
  >;

  convertBnbXToBnb: TypedContractMethod<
    [_amountInBnbX: BigNumberish],
    [bigint],
    "view"
  >;

  deposit: TypedContractMethod<[], [void], "payable">;

  getBnbXWithdrawLimit: TypedContractMethod<[], [bigint], "view">;

  getBotDelegateRequest: TypedContractMethod<
    [_uuid: BigNumberish],
    [IStaderStakeManager.BotDelegateRequestStructOutput],
    "view"
  >;

  getBotUndelegateRequest: TypedContractMethod<
    [_uuid: BigNumberish],
    [IStaderStakeManager.BotUndelegateRequestStructOutput],
    "view"
  >;

  getContracts: TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        _manager: string;
        _bnbX: string;
        _tokenHub: string;
        _bcDepositWallet: string;
      }
    ],
    "view"
  >;

  getExtraBnbInContract: TypedContractMethod<[], [bigint], "view">;

  getTokenHubRelayFee: TypedContractMethod<[], [bigint], "view">;

  getTotalPooledBnb: TypedContractMethod<[], [bigint], "view">;

  getUserRequestStatus: TypedContractMethod<
    [_user: AddressLike, _idx: BigNumberish],
    [[boolean, bigint] & { _isClaimable: boolean; _amount: bigint }],
    "view"
  >;

  getUserWithdrawalRequests: TypedContractMethod<
    [_address: AddressLike],
    [IStaderStakeManager.WithdrawalRequestStructOutput[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [
      _bnbX: AddressLike,
      _admin: AddressLike,
      _manager: AddressLike,
      _tokenHub: AddressLike,
      _bcDepositWallet: AddressLike,
      _bot: AddressLike,
      _feeBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  proposeNewManager: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  requestWithdraw: TypedContractMethod<
    [_amountInBnbX: BigNumberish],
    [void],
    "nonpayable"
  >;

  retryTransferOut: TypedContractMethod<
    [_uuid: BigNumberish],
    [void],
    "payable"
  >;

  revokeBotRole: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setBCDepositWallet: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setBotRole: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeeBps: TypedContractMethod<[_feeBps: BigNumberish], [void], "nonpayable">;

  setMinDelegateThreshold: TypedContractMethod<
    [_minDelegateThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinUndelegateThreshold: TypedContractMethod<
    [_minUndelegateThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRedirectAddress: TypedContractMethod<
    [_address: AddressLike],
    [void],
    "nonpayable"
  >;

  startDelegation: TypedContractMethod<
    [],
    [[bigint, bigint] & { _uuid: bigint; _amount: bigint }],
    "payable"
  >;

  startUndelegation: TypedContractMethod<
    [],
    [[bigint, bigint] & { _uuid: bigint; _amount: bigint }],
    "nonpayable"
  >;

  undelegationStarted: TypedContractMethod<
    [_uuid: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptNewManager"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addRestakingRewards"
  ): TypedContractMethod<
    [_id: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimWithdraw"
  ): TypedContractMethod<[_idx: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeDelegation"
  ): TypedContractMethod<[_uuid: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeUndelegation"
  ): TypedContractMethod<[_uuid: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "convertBnbToBnbX"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertBnbXToBnb"
  ): TypedContractMethod<[_amountInBnbX: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "getBnbXWithdrawLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBotDelegateRequest"
  ): TypedContractMethod<
    [_uuid: BigNumberish],
    [IStaderStakeManager.BotDelegateRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBotUndelegateRequest"
  ): TypedContractMethod<
    [_uuid: BigNumberish],
    [IStaderStakeManager.BotUndelegateRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContracts"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, string] & {
        _manager: string;
        _bnbX: string;
        _tokenHub: string;
        _bcDepositWallet: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExtraBnbInContract"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenHubRelayFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPooledBnb"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserRequestStatus"
  ): TypedContractMethod<
    [_user: AddressLike, _idx: BigNumberish],
    [[boolean, bigint] & { _isClaimable: boolean; _amount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserWithdrawalRequests"
  ): TypedContractMethod<
    [_address: AddressLike],
    [IStaderStakeManager.WithdrawalRequestStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _bnbX: AddressLike,
      _admin: AddressLike,
      _manager: AddressLike,
      _tokenHub: AddressLike,
      _bcDepositWallet: AddressLike,
      _bot: AddressLike,
      _feeBps: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proposeNewManager"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWithdraw"
  ): TypedContractMethod<[_amountInBnbX: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "retryTransferOut"
  ): TypedContractMethod<[_uuid: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "revokeBotRole"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBCDepositWallet"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBotRole"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeBps"
  ): TypedContractMethod<[_feeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinDelegateThreshold"
  ): TypedContractMethod<
    [_minDelegateThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMinUndelegateThreshold"
  ): TypedContractMethod<
    [_minUndelegateThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRedirectAddress"
  ): TypedContractMethod<[_address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDelegation"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _uuid: bigint; _amount: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "startUndelegation"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { _uuid: bigint; _amount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegationStarted"
  ): TypedContractMethod<[_uuid: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ClaimWithdrawal"
  ): TypedContractEvent<
    ClaimWithdrawalEvent.InputTuple,
    ClaimWithdrawalEvent.OutputTuple,
    ClaimWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "Delegate"
  ): TypedContractEvent<
    DelegateEvent.InputTuple,
    DelegateEvent.OutputTuple,
    DelegateEvent.OutputObject
  >;
  getEvent(
    key: "ProposeManager"
  ): TypedContractEvent<
    ProposeManagerEvent.InputTuple,
    ProposeManagerEvent.OutputTuple,
    ProposeManagerEvent.OutputObject
  >;
  getEvent(
    key: "Redelegate"
  ): TypedContractEvent<
    RedelegateEvent.InputTuple,
    RedelegateEvent.OutputTuple,
    RedelegateEvent.OutputObject
  >;
  getEvent(
    key: "RequestWithdraw"
  ): TypedContractEvent<
    RequestWithdrawEvent.InputTuple,
    RequestWithdrawEvent.OutputTuple,
    RequestWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "RevokeBotRole"
  ): TypedContractEvent<
    RevokeBotRoleEvent.InputTuple,
    RevokeBotRoleEvent.OutputTuple,
    RevokeBotRoleEvent.OutputObject
  >;
  getEvent(
    key: "SetBCDepositWallet"
  ): TypedContractEvent<
    SetBCDepositWalletEvent.InputTuple,
    SetBCDepositWalletEvent.OutputTuple,
    SetBCDepositWalletEvent.OutputObject
  >;
  getEvent(
    key: "SetBotRole"
  ): TypedContractEvent<
    SetBotRoleEvent.InputTuple,
    SetBotRoleEvent.OutputTuple,
    SetBotRoleEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeBps"
  ): TypedContractEvent<
    SetFeeBpsEvent.InputTuple,
    SetFeeBpsEvent.OutputTuple,
    SetFeeBpsEvent.OutputObject
  >;
  getEvent(
    key: "SetManager"
  ): TypedContractEvent<
    SetManagerEvent.InputTuple,
    SetManagerEvent.OutputTuple,
    SetManagerEvent.OutputObject
  >;
  getEvent(
    key: "SetMinDelegateThreshold"
  ): TypedContractEvent<
    SetMinDelegateThresholdEvent.InputTuple,
    SetMinDelegateThresholdEvent.OutputTuple,
    SetMinDelegateThresholdEvent.OutputObject
  >;
  getEvent(
    key: "SetMinUndelegateThreshold"
  ): TypedContractEvent<
    SetMinUndelegateThresholdEvent.InputTuple,
    SetMinUndelegateThresholdEvent.OutputTuple,
    SetMinUndelegateThresholdEvent.OutputObject
  >;
  getEvent(
    key: "SetRedirectAddress"
  ): TypedContractEvent<
    SetRedirectAddressEvent.InputTuple,
    SetRedirectAddressEvent.OutputTuple,
    SetRedirectAddressEvent.OutputObject
  >;
  getEvent(
    key: "TransferOut"
  ): TypedContractEvent<
    TransferOutEvent.InputTuple,
    TransferOutEvent.OutputTuple,
    TransferOutEvent.OutputObject
  >;
  getEvent(
    key: "Undelegate"
  ): TypedContractEvent<
    UndelegateEvent.InputTuple,
    UndelegateEvent.OutputTuple,
    UndelegateEvent.OutputObject
  >;

  filters: {
    "ClaimWithdrawal(address,uint256,uint256)": TypedContractEvent<
      ClaimWithdrawalEvent.InputTuple,
      ClaimWithdrawalEvent.OutputTuple,
      ClaimWithdrawalEvent.OutputObject
    >;
    ClaimWithdrawal: TypedContractEvent<
      ClaimWithdrawalEvent.InputTuple,
      ClaimWithdrawalEvent.OutputTuple,
      ClaimWithdrawalEvent.OutputObject
    >;

    "Delegate(uint256,uint256)": TypedContractEvent<
      DelegateEvent.InputTuple,
      DelegateEvent.OutputTuple,
      DelegateEvent.OutputObject
    >;
    Delegate: TypedContractEvent<
      DelegateEvent.InputTuple,
      DelegateEvent.OutputTuple,
      DelegateEvent.OutputObject
    >;

    "ProposeManager(address)": TypedContractEvent<
      ProposeManagerEvent.InputTuple,
      ProposeManagerEvent.OutputTuple,
      ProposeManagerEvent.OutputObject
    >;
    ProposeManager: TypedContractEvent<
      ProposeManagerEvent.InputTuple,
      ProposeManagerEvent.OutputTuple,
      ProposeManagerEvent.OutputObject
    >;

    "Redelegate(uint256,uint256)": TypedContractEvent<
      RedelegateEvent.InputTuple,
      RedelegateEvent.OutputTuple,
      RedelegateEvent.OutputObject
    >;
    Redelegate: TypedContractEvent<
      RedelegateEvent.InputTuple,
      RedelegateEvent.OutputTuple,
      RedelegateEvent.OutputObject
    >;

    "RequestWithdraw(address,uint256)": TypedContractEvent<
      RequestWithdrawEvent.InputTuple,
      RequestWithdrawEvent.OutputTuple,
      RequestWithdrawEvent.OutputObject
    >;
    RequestWithdraw: TypedContractEvent<
      RequestWithdrawEvent.InputTuple,
      RequestWithdrawEvent.OutputTuple,
      RequestWithdrawEvent.OutputObject
    >;

    "RevokeBotRole(address)": TypedContractEvent<
      RevokeBotRoleEvent.InputTuple,
      RevokeBotRoleEvent.OutputTuple,
      RevokeBotRoleEvent.OutputObject
    >;
    RevokeBotRole: TypedContractEvent<
      RevokeBotRoleEvent.InputTuple,
      RevokeBotRoleEvent.OutputTuple,
      RevokeBotRoleEvent.OutputObject
    >;

    "SetBCDepositWallet(address)": TypedContractEvent<
      SetBCDepositWalletEvent.InputTuple,
      SetBCDepositWalletEvent.OutputTuple,
      SetBCDepositWalletEvent.OutputObject
    >;
    SetBCDepositWallet: TypedContractEvent<
      SetBCDepositWalletEvent.InputTuple,
      SetBCDepositWalletEvent.OutputTuple,
      SetBCDepositWalletEvent.OutputObject
    >;

    "SetBotRole(address)": TypedContractEvent<
      SetBotRoleEvent.InputTuple,
      SetBotRoleEvent.OutputTuple,
      SetBotRoleEvent.OutputObject
    >;
    SetBotRole: TypedContractEvent<
      SetBotRoleEvent.InputTuple,
      SetBotRoleEvent.OutputTuple,
      SetBotRoleEvent.OutputObject
    >;

    "SetFeeBps(uint256)": TypedContractEvent<
      SetFeeBpsEvent.InputTuple,
      SetFeeBpsEvent.OutputTuple,
      SetFeeBpsEvent.OutputObject
    >;
    SetFeeBps: TypedContractEvent<
      SetFeeBpsEvent.InputTuple,
      SetFeeBpsEvent.OutputTuple,
      SetFeeBpsEvent.OutputObject
    >;

    "SetManager(address)": TypedContractEvent<
      SetManagerEvent.InputTuple,
      SetManagerEvent.OutputTuple,
      SetManagerEvent.OutputObject
    >;
    SetManager: TypedContractEvent<
      SetManagerEvent.InputTuple,
      SetManagerEvent.OutputTuple,
      SetManagerEvent.OutputObject
    >;

    "SetMinDelegateThreshold(uint256)": TypedContractEvent<
      SetMinDelegateThresholdEvent.InputTuple,
      SetMinDelegateThresholdEvent.OutputTuple,
      SetMinDelegateThresholdEvent.OutputObject
    >;
    SetMinDelegateThreshold: TypedContractEvent<
      SetMinDelegateThresholdEvent.InputTuple,
      SetMinDelegateThresholdEvent.OutputTuple,
      SetMinDelegateThresholdEvent.OutputObject
    >;

    "SetMinUndelegateThreshold(uint256)": TypedContractEvent<
      SetMinUndelegateThresholdEvent.InputTuple,
      SetMinUndelegateThresholdEvent.OutputTuple,
      SetMinUndelegateThresholdEvent.OutputObject
    >;
    SetMinUndelegateThreshold: TypedContractEvent<
      SetMinUndelegateThresholdEvent.InputTuple,
      SetMinUndelegateThresholdEvent.OutputTuple,
      SetMinUndelegateThresholdEvent.OutputObject
    >;

    "SetRedirectAddress(address)": TypedContractEvent<
      SetRedirectAddressEvent.InputTuple,
      SetRedirectAddressEvent.OutputTuple,
      SetRedirectAddressEvent.OutputObject
    >;
    SetRedirectAddress: TypedContractEvent<
      SetRedirectAddressEvent.InputTuple,
      SetRedirectAddressEvent.OutputTuple,
      SetRedirectAddressEvent.OutputObject
    >;

    "TransferOut(uint256)": TypedContractEvent<
      TransferOutEvent.InputTuple,
      TransferOutEvent.OutputTuple,
      TransferOutEvent.OutputObject
    >;
    TransferOut: TypedContractEvent<
      TransferOutEvent.InputTuple,
      TransferOutEvent.OutputTuple,
      TransferOutEvent.OutputObject
    >;

    "Undelegate(uint256,uint256)": TypedContractEvent<
      UndelegateEvent.InputTuple,
      UndelegateEvent.OutputTuple,
      UndelegateEvent.OutputObject
    >;
    Undelegate: TypedContractEvent<
      UndelegateEvent.InputTuple,
      UndelegateEvent.OutputTuple,
      UndelegateEvent.OutputObject
    >;
  };
}
