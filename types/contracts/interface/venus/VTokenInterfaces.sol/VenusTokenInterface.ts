/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface VenusTokenInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_acceptAdmin"
      | "_reduceReserves"
      | "_setPendingAdmin"
      | "_setReserveFactor"
      | "accrueInterest"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "balanceOfUnderlying"
      | "borrowBalanceCurrent"
      | "borrowBalanceStored"
      | "borrowRatePerBlock"
      | "exchangeRateCurrent"
      | "exchangeRateStored"
      | "getAccountSnapshot"
      | "getCash"
      | "seize"
      | "supplyRatePerBlock"
      | "totalBorrowsCurrent"
      | "transfer"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccrueInterest"
      | "Approval"
      | "Borrow"
      | "Failure"
      | "LiquidateBorrow"
      | "Mint"
      | "MintBehalf"
      | "NewAccessControlManager"
      | "NewAdmin"
      | "NewPendingAdmin"
      | "NewProtocolShareReserve"
      | "NewReduceReservesBlockDelta"
      | "NewReserveFactor"
      | "Redeem"
      | "RedeemFee"
      | "RepayBorrow"
      | "ReservesAdded"
      | "ReservesReduced"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_acceptAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_reduceReserves",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_setPendingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "_setReserveFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "accrueInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfUnderlying",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceCurrent",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceStored",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountSnapshot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getCash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "seize",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyRatePerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowsCurrent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "_acceptAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_reduceReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setPendingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_setReserveFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accrueInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "seize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supplyRatePerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowsCurrent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace AccrueInterestEvent {
  export type InputTuple = [
    cashPrior: BigNumberish,
    interestAccumulated: BigNumberish,
    borrowIndex: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    cashPrior: bigint,
    interestAccumulated: bigint,
    borrowIndex: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    cashPrior: bigint;
    interestAccumulated: bigint;
    borrowIndex: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    borrower: AddressLike,
    borrowAmount: BigNumberish,
    accountBorrows: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    borrower: string,
    borrowAmount: bigint,
    accountBorrows: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    borrower: string;
    borrowAmount: bigint;
    accountBorrows: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FailureEvent {
  export type InputTuple = [
    error: BigNumberish,
    info: BigNumberish,
    detail: BigNumberish
  ];
  export type OutputTuple = [error: bigint, info: bigint, detail: bigint];
  export interface OutputObject {
    error: bigint;
    info: bigint;
    detail: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidateBorrowEvent {
  export type InputTuple = [
    liquidator: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    vTokenCollateral: AddressLike,
    seizeTokens: BigNumberish
  ];
  export type OutputTuple = [
    liquidator: string,
    borrower: string,
    repayAmount: bigint,
    vTokenCollateral: string,
    seizeTokens: bigint
  ];
  export interface OutputObject {
    liquidator: string;
    borrower: string;
    repayAmount: bigint;
    vTokenCollateral: string;
    seizeTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintEvent {
  export type InputTuple = [
    minter: AddressLike,
    mintAmount: BigNumberish,
    mintTokens: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    minter: string,
    mintAmount: bigint,
    mintTokens: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    minter: string;
    mintAmount: bigint;
    mintTokens: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintBehalfEvent {
  export type InputTuple = [
    payer: AddressLike,
    receiver: AddressLike,
    mintAmount: BigNumberish,
    mintTokens: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    receiver: string,
    mintAmount: bigint,
    mintTokens: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    payer: string;
    receiver: string;
    mintAmount: bigint;
    mintTokens: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAccessControlManagerEvent {
  export type InputTuple = [
    oldAccessControlAddress: AddressLike,
    newAccessControlAddress: AddressLike
  ];
  export type OutputTuple = [
    oldAccessControlAddress: string,
    newAccessControlAddress: string
  ];
  export interface OutputObject {
    oldAccessControlAddress: string;
    newAccessControlAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewAdminEvent {
  export type InputTuple = [oldAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [oldAdmin: string, newAdmin: string];
  export interface OutputObject {
    oldAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewPendingAdminEvent {
  export type InputTuple = [
    oldPendingAdmin: AddressLike,
    newPendingAdmin: AddressLike
  ];
  export type OutputTuple = [oldPendingAdmin: string, newPendingAdmin: string];
  export interface OutputObject {
    oldPendingAdmin: string;
    newPendingAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewProtocolShareReserveEvent {
  export type InputTuple = [
    oldProtocolShareReserve: AddressLike,
    newProtocolShareReserve: AddressLike
  ];
  export type OutputTuple = [
    oldProtocolShareReserve: string,
    newProtocolShareReserve: string
  ];
  export interface OutputObject {
    oldProtocolShareReserve: string;
    newProtocolShareReserve: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewReduceReservesBlockDeltaEvent {
  export type InputTuple = [
    oldReduceReservesBlockDelta: BigNumberish,
    newReduceReservesBlockDelta: BigNumberish
  ];
  export type OutputTuple = [
    oldReduceReservesBlockDelta: bigint,
    newReduceReservesBlockDelta: bigint
  ];
  export interface OutputObject {
    oldReduceReservesBlockDelta: bigint;
    newReduceReservesBlockDelta: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewReserveFactorEvent {
  export type InputTuple = [
    oldReserveFactorMantissa: BigNumberish,
    newReserveFactorMantissa: BigNumberish
  ];
  export type OutputTuple = [
    oldReserveFactorMantissa: bigint,
    newReserveFactorMantissa: bigint
  ];
  export interface OutputObject {
    oldReserveFactorMantissa: bigint;
    newReserveFactorMantissa: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    redeemAmount: BigNumberish,
    redeemTokens: BigNumberish,
    totalSupply: BigNumberish
  ];
  export type OutputTuple = [
    redeemer: string,
    redeemAmount: bigint,
    redeemTokens: bigint,
    totalSupply: bigint
  ];
  export interface OutputObject {
    redeemer: string;
    redeemAmount: bigint;
    redeemTokens: bigint;
    totalSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemFeeEvent {
  export type InputTuple = [
    redeemer: AddressLike,
    feeAmount: BigNumberish,
    redeemTokens: BigNumberish
  ];
  export type OutputTuple = [
    redeemer: string,
    feeAmount: bigint,
    redeemTokens: bigint
  ];
  export interface OutputObject {
    redeemer: string;
    feeAmount: bigint;
    redeemTokens: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayBorrowEvent {
  export type InputTuple = [
    payer: AddressLike,
    borrower: AddressLike,
    repayAmount: BigNumberish,
    accountBorrows: BigNumberish,
    totalBorrows: BigNumberish
  ];
  export type OutputTuple = [
    payer: string,
    borrower: string,
    repayAmount: bigint,
    accountBorrows: bigint,
    totalBorrows: bigint
  ];
  export interface OutputObject {
    payer: string;
    borrower: string;
    repayAmount: bigint;
    accountBorrows: bigint;
    totalBorrows: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservesAddedEvent {
  export type InputTuple = [
    benefactor: AddressLike,
    addAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    benefactor: string,
    addAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    benefactor: string;
    addAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReservesReducedEvent {
  export type InputTuple = [
    protocolShareReserve: AddressLike,
    reduceAmount: BigNumberish,
    newTotalReserves: BigNumberish
  ];
  export type OutputTuple = [
    protocolShareReserve: string,
    reduceAmount: bigint,
    newTotalReserves: bigint
  ];
  export interface OutputObject {
    protocolShareReserve: string;
    reduceAmount: bigint;
    newTotalReserves: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, amount: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VenusTokenInterface extends BaseContract {
  connect(runner?: ContractRunner | null): VenusTokenInterface;
  waitForDeployment(): Promise<this>;

  interface: VenusTokenInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _acceptAdmin: TypedContractMethod<[], [bigint], "nonpayable">;

  _reduceReserves: TypedContractMethod<
    [reduceAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  _setPendingAdmin: TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [bigint],
    "nonpayable"
  >;

  _setReserveFactor: TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  accrueInterest: TypedContractMethod<[], [bigint], "nonpayable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  balanceOfUnderlying: TypedContractMethod<
    [owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  borrowBalanceCurrent: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "nonpayable"
  >;

  borrowBalanceStored: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  borrowRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  exchangeRateCurrent: TypedContractMethod<[], [bigint], "nonpayable">;

  exchangeRateStored: TypedContractMethod<[], [bigint], "view">;

  getAccountSnapshot: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getCash: TypedContractMethod<[], [bigint], "view">;

  seize: TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, seizeTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  supplyRatePerBlock: TypedContractMethod<[], [bigint], "view">;

  totalBorrowsCurrent: TypedContractMethod<[], [bigint], "nonpayable">;

  transfer: TypedContractMethod<
    [dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_acceptAdmin"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "_reduceReserves"
  ): TypedContractMethod<[reduceAmount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "_setPendingAdmin"
  ): TypedContractMethod<
    [newPendingAdmin: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "_setReserveFactor"
  ): TypedContractMethod<
    [newReserveFactorMantissa: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "accrueInterest"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOfUnderlying"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowBalanceCurrent"
  ): TypedContractMethod<[account: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "borrowBalanceStored"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "borrowRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exchangeRateCurrent"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "exchangeRateStored"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccountSnapshot"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCash"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "seize"
  ): TypedContractMethod<
    [liquidator: AddressLike, borrower: AddressLike, seizeTokens: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supplyRatePerBlock"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBorrowsCurrent"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [src: AddressLike, dst: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "AccrueInterest"
  ): TypedContractEvent<
    AccrueInterestEvent.InputTuple,
    AccrueInterestEvent.OutputTuple,
    AccrueInterestEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "Failure"
  ): TypedContractEvent<
    FailureEvent.InputTuple,
    FailureEvent.OutputTuple,
    FailureEvent.OutputObject
  >;
  getEvent(
    key: "LiquidateBorrow"
  ): TypedContractEvent<
    LiquidateBorrowEvent.InputTuple,
    LiquidateBorrowEvent.OutputTuple,
    LiquidateBorrowEvent.OutputObject
  >;
  getEvent(
    key: "Mint"
  ): TypedContractEvent<
    MintEvent.InputTuple,
    MintEvent.OutputTuple,
    MintEvent.OutputObject
  >;
  getEvent(
    key: "MintBehalf"
  ): TypedContractEvent<
    MintBehalfEvent.InputTuple,
    MintBehalfEvent.OutputTuple,
    MintBehalfEvent.OutputObject
  >;
  getEvent(
    key: "NewAccessControlManager"
  ): TypedContractEvent<
    NewAccessControlManagerEvent.InputTuple,
    NewAccessControlManagerEvent.OutputTuple,
    NewAccessControlManagerEvent.OutputObject
  >;
  getEvent(
    key: "NewAdmin"
  ): TypedContractEvent<
    NewAdminEvent.InputTuple,
    NewAdminEvent.OutputTuple,
    NewAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewPendingAdmin"
  ): TypedContractEvent<
    NewPendingAdminEvent.InputTuple,
    NewPendingAdminEvent.OutputTuple,
    NewPendingAdminEvent.OutputObject
  >;
  getEvent(
    key: "NewProtocolShareReserve"
  ): TypedContractEvent<
    NewProtocolShareReserveEvent.InputTuple,
    NewProtocolShareReserveEvent.OutputTuple,
    NewProtocolShareReserveEvent.OutputObject
  >;
  getEvent(
    key: "NewReduceReservesBlockDelta"
  ): TypedContractEvent<
    NewReduceReservesBlockDeltaEvent.InputTuple,
    NewReduceReservesBlockDeltaEvent.OutputTuple,
    NewReduceReservesBlockDeltaEvent.OutputObject
  >;
  getEvent(
    key: "NewReserveFactor"
  ): TypedContractEvent<
    NewReserveFactorEvent.InputTuple,
    NewReserveFactorEvent.OutputTuple,
    NewReserveFactorEvent.OutputObject
  >;
  getEvent(
    key: "Redeem"
  ): TypedContractEvent<
    RedeemEvent.InputTuple,
    RedeemEvent.OutputTuple,
    RedeemEvent.OutputObject
  >;
  getEvent(
    key: "RedeemFee"
  ): TypedContractEvent<
    RedeemFeeEvent.InputTuple,
    RedeemFeeEvent.OutputTuple,
    RedeemFeeEvent.OutputObject
  >;
  getEvent(
    key: "RepayBorrow"
  ): TypedContractEvent<
    RepayBorrowEvent.InputTuple,
    RepayBorrowEvent.OutputTuple,
    RepayBorrowEvent.OutputObject
  >;
  getEvent(
    key: "ReservesAdded"
  ): TypedContractEvent<
    ReservesAddedEvent.InputTuple,
    ReservesAddedEvent.OutputTuple,
    ReservesAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReservesReduced"
  ): TypedContractEvent<
    ReservesReducedEvent.InputTuple,
    ReservesReducedEvent.OutputTuple,
    ReservesReducedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AccrueInterest(uint256,uint256,uint256,uint256)": TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;
    AccrueInterest: TypedContractEvent<
      AccrueInterestEvent.InputTuple,
      AccrueInterestEvent.OutputTuple,
      AccrueInterestEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Borrow(address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "Failure(uint256,uint256,uint256)": TypedContractEvent<
      FailureEvent.InputTuple,
      FailureEvent.OutputTuple,
      FailureEvent.OutputObject
    >;
    Failure: TypedContractEvent<
      FailureEvent.InputTuple,
      FailureEvent.OutputTuple,
      FailureEvent.OutputObject
    >;

    "LiquidateBorrow(address,address,uint256,address,uint256)": TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;
    LiquidateBorrow: TypedContractEvent<
      LiquidateBorrowEvent.InputTuple,
      LiquidateBorrowEvent.OutputTuple,
      LiquidateBorrowEvent.OutputObject
    >;

    "Mint(address,uint256,uint256,uint256)": TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;
    Mint: TypedContractEvent<
      MintEvent.InputTuple,
      MintEvent.OutputTuple,
      MintEvent.OutputObject
    >;

    "MintBehalf(address,address,uint256,uint256,uint256)": TypedContractEvent<
      MintBehalfEvent.InputTuple,
      MintBehalfEvent.OutputTuple,
      MintBehalfEvent.OutputObject
    >;
    MintBehalf: TypedContractEvent<
      MintBehalfEvent.InputTuple,
      MintBehalfEvent.OutputTuple,
      MintBehalfEvent.OutputObject
    >;

    "NewAccessControlManager(address,address)": TypedContractEvent<
      NewAccessControlManagerEvent.InputTuple,
      NewAccessControlManagerEvent.OutputTuple,
      NewAccessControlManagerEvent.OutputObject
    >;
    NewAccessControlManager: TypedContractEvent<
      NewAccessControlManagerEvent.InputTuple,
      NewAccessControlManagerEvent.OutputTuple,
      NewAccessControlManagerEvent.OutputObject
    >;

    "NewAdmin(address,address)": TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;
    NewAdmin: TypedContractEvent<
      NewAdminEvent.InputTuple,
      NewAdminEvent.OutputTuple,
      NewAdminEvent.OutputObject
    >;

    "NewPendingAdmin(address,address)": TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;
    NewPendingAdmin: TypedContractEvent<
      NewPendingAdminEvent.InputTuple,
      NewPendingAdminEvent.OutputTuple,
      NewPendingAdminEvent.OutputObject
    >;

    "NewProtocolShareReserve(address,address)": TypedContractEvent<
      NewProtocolShareReserveEvent.InputTuple,
      NewProtocolShareReserveEvent.OutputTuple,
      NewProtocolShareReserveEvent.OutputObject
    >;
    NewProtocolShareReserve: TypedContractEvent<
      NewProtocolShareReserveEvent.InputTuple,
      NewProtocolShareReserveEvent.OutputTuple,
      NewProtocolShareReserveEvent.OutputObject
    >;

    "NewReduceReservesBlockDelta(uint256,uint256)": TypedContractEvent<
      NewReduceReservesBlockDeltaEvent.InputTuple,
      NewReduceReservesBlockDeltaEvent.OutputTuple,
      NewReduceReservesBlockDeltaEvent.OutputObject
    >;
    NewReduceReservesBlockDelta: TypedContractEvent<
      NewReduceReservesBlockDeltaEvent.InputTuple,
      NewReduceReservesBlockDeltaEvent.OutputTuple,
      NewReduceReservesBlockDeltaEvent.OutputObject
    >;

    "NewReserveFactor(uint256,uint256)": TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;
    NewReserveFactor: TypedContractEvent<
      NewReserveFactorEvent.InputTuple,
      NewReserveFactorEvent.OutputTuple,
      NewReserveFactorEvent.OutputObject
    >;

    "Redeem(address,uint256,uint256,uint256)": TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;
    Redeem: TypedContractEvent<
      RedeemEvent.InputTuple,
      RedeemEvent.OutputTuple,
      RedeemEvent.OutputObject
    >;

    "RedeemFee(address,uint256,uint256)": TypedContractEvent<
      RedeemFeeEvent.InputTuple,
      RedeemFeeEvent.OutputTuple,
      RedeemFeeEvent.OutputObject
    >;
    RedeemFee: TypedContractEvent<
      RedeemFeeEvent.InputTuple,
      RedeemFeeEvent.OutputTuple,
      RedeemFeeEvent.OutputObject
    >;

    "RepayBorrow(address,address,uint256,uint256,uint256)": TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;
    RepayBorrow: TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;

    "ReservesAdded(address,uint256,uint256)": TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;
    ReservesAdded: TypedContractEvent<
      ReservesAddedEvent.InputTuple,
      ReservesAddedEvent.OutputTuple,
      ReservesAddedEvent.OutputObject
    >;

    "ReservesReduced(address,uint256,uint256)": TypedContractEvent<
      ReservesReducedEvent.InputTuple,
      ReservesReducedEvent.OutputTuple,
      ReservesReducedEvent.OutputObject
    >;
    ReservesReduced: TypedContractEvent<
      ReservesReducedEvent.InputTuple,
      ReservesReducedEvent.OutputTuple,
      ReservesReducedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
